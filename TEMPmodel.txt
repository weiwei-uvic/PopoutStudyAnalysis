
  model {
    for ( i in 1:Ntotal ) {
      y[i] ~ dt( mu[i] , 1/(ySigma[x1[i],x2[i]])^2 , nu ) # likehood
      mu[i] <- a0 + a1[x1[i]] + a2[x2[i]] + a1a2[x1[i],x2[i]]
    }
    # For sparse data with lots of outliers, there can be multimodal small-nu
    # estimates, in which case you may want to change the prior to force a 
    # larger value of nu, such as  nu ~ dgamma(5.83,0.0483)  mode 100, sd 50


    ### Priori definitions
    # priori for nu
    # nu: the “normality” parameter, range from 1 to infinite.
    nu ~ dexp(1/30.0)  #This line equals to:  nu <- nuMinusOne+1 and nuMinusOne ˜ dexp(1/29)
    #
    # priori for sigma
    for ( j1 in 1:Nx1Lvl ) { for ( j2 in 1:Nx2Lvl ) { 
      sigma[j1,j2] ~ dgamma( sigmaSh , sigmaRa )
      # Prevent from dropping too close to zero:
      ySigma[j1,j2] <- max( sigma[j1,j2] , medianCellSD/1000 )
    } }
    sigmaSh <- 1 + sigmaMode * sigmaRa
    sigmaRa <- ( sigmaMode + sqrt( sigmaMode^2 + 4*sigmaSD^2 ) ) /(2*sigmaSD^2)
    sigmaMode ~ dgamma(sGammaShRa[1],sGammaShRa[2]) 
    sigmaSD ~ dgamma(sGammaShRa[1],sGammaShRa[2]) 
    # priori for mu, which consists of a0, a1, a2, a1a2
    a0 ~ dnorm( yMean , 1/(ySD*5)^2 ) 
    #
    for ( j1 in 1:Nx1Lvl ) { a1[j1] ~ dnorm( 0.0 , 1/a1SD^2 ) }
    a1SD ~ dgamma(aGammaShRa[1],aGammaShRa[2]) 
    #
    for ( j2 in 1:Nx2Lvl ) { a2[j2] ~ dnorm( 0.0 , 1/a2SD^2 ) }
    a2SD ~ dgamma(aGammaShRa[1],aGammaShRa[2]) 
    #
    for ( j1 in 1:Nx1Lvl ) { for ( j2 in 1:Nx2Lvl ) {
      a1a2[j1,j2] ~ dnorm( 0.0 , 1/a1a2SD^2 )
    } }
    a1a2SD ~ dgamma(aGammaShRa[1],aGammaShRa[2]) # or try a folded t (Cauchy)
    # Convert a0,a1[],a2[],a1a2[,] to sum-to-zero b0,b1[],b2[],b1b2[,] :
    for ( j1 in 1:Nx1Lvl ) { for ( j2 in 1:Nx2Lvl ) {
      m[j1,j2] <- a0 + a1[j1] + a2[j2] + a1a2[j1,j2] # cell means 
    } }
    b0 <- mean( m[1:Nx1Lvl,1:Nx2Lvl] )
    for ( j1 in 1:Nx1Lvl ) { b1[j1] <- mean( m[j1,1:Nx2Lvl] ) - b0 }
    for ( j2 in 1:Nx2Lvl ) { b2[j2] <- mean( m[1:Nx1Lvl,j2] ) - b0 }
    for ( j1 in 1:Nx1Lvl ) { for ( j2 in 1:Nx2Lvl ) {
          b1b2[j1,j2] <- m[j1,j2] - ( b0 + b1[j1] + b2[j2] )  
        } }
  }
  
